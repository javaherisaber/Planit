/////// load signature file //////
def keystorePropertiesFile = file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath "io.fabric.tools:gradle:${versions.fabricGradle}"
    }
}

android {
    compileSdkVersion config.compileSdk
    defaultConfig {
        applicationId "ir.logicbase.planit"
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        production {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.production
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kapt {
        useBuildCache = true
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 500)
        }
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
        skipDeprecated = true // Do not output deprecated members
        reportUndocumented = true // Emit warnings about not documented members.
    }
}

dependencies {
    // logicfan
    implementation "com.github.logicfanlab:AndroidProjectCore:$versions.logicfanCore"

    // androidx
    implementation "androidx.appcompat:appcompat:$versions.appCompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
    implementation "androidx.constraintlayout:constraintlayout-solver:$versions.constraintLayout"
    implementation "androidx.vectordrawable:vectordrawable:$versions.vectorDrawable"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerView"
    implementation "androidx.cardview:cardview:$versions.cardView"
    implementation "androidx.legacy:legacy-support-v4:$versions.legacySupport"
    implementation "androidx.preference:preference:$versions.preference"
    implementation "androidx.browser:browser:$versions.browser"
    implementation "androidx.multidex:multidex:$versions.multidex"

    // dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$versions.rxRetrofit"

    // rx-reactive
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
    implementation "com.github.tbruyelle:rxpermissions:$versions.rxPermission"

    // ok-http
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpLoggingInterceptor"

    // google
    implementation "com.google.android.material:material:$versions.material"
    implementation "com.google.code.gson:gson:$versions.gson"
    implementation "com.google.android.gms:play-services-maps:$versions.googleMaps"
    implementation "com.google.android.gms:play-services-gcm:$versions.googleGcm"
    implementation "com.google.android.gms:play-services-location:$versions.googleLocation"
    implementation "com.google.android.gms:play-services-ads:$versions.googleAds"
    implementation "com.google.maps.android:android-maps-utils:$versions.mapsUtils"

    // firebase
    implementation "com.google.firebase:firebase-core:$versions.firebaseCore"

    // butter-knife
    implementation "com.jakewharton:butterknife:$versions.butterknife"
    kapt "com.jakewharton:butterknife-compiler:$versions.butterknife"

    // test
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test:runner:$versions.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"

    // leak-canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$versions.leakCanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"

    // other dependencies
    implementation "org.jetbrains.anko:anko-commons:$versions.anko"
    implementation "de.hdodenhof:circleimageview:$versions.circleImageView"
    implementation "com.squareup.picasso:picasso:$versions.picasso"
    implementation "co.ronash.android:pushe-base:$versions.pushe"
    implementation "com.github.roojin:persian-calendar-view:$versions.persianCalendar"
    implementation("com.crashlytics.sdk.android:crashlytics:$versions.fabric@aar") {
        transitive = true
    }

    // config
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
}

apply plugin: 'com.google.gms.google-services'